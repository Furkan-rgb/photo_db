{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/Signup.js","hooks/useStorage.js","components/ProgressBar.js","hooks/useFirestore.js","hooks/useFirestore2.js","components/ImageGrid.js","components/Dashboard.js","components/Login.js","components/ForgotPassword.js","components/UpdateProfile.js","components/privateRoute.js","components/App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","deleteAccount","delete","updateDisplayName","userName","updateProfile","displayName","Provider","useStyles","makeStyles","theme","root","margin","spacing","width","container","height","card","marginBottom","paddingBottom","inputField","maxWidth","Signup","classes","emailRef","useRef","passwordRef","passwordConfirmRef","displayNameRef","error","setError","history","useHistory","accounts","collection","e","a","preventDefault","current","result","console","log","doc","uid","set","userID","push","message","Grid","className","justify","alignItems","item","xs","sm","Card","direction","Typography","align","variant","component","Alert","severity","onSubmit","TextField","required","id","label","inputRef","textalign","type","autoComplete","Button","disabled","color","to","useStorage","file","progress","setProgress","url","setUrl","storageRef","ref","name","collectionRef","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add","ProgressBar","setFile","style","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","data","useFirestore2","docs2","ImageGrid","alert","useAlert","setMouse","columnsCountBreakPoints","350","750","900","gutter","map","image","filter","onMouseEnter","onMouseLeave","small","medium","alt","hideDownload","hideZoom","gutterBottom","imageId","IconButton","aria-label","onClick","imgRef","refFromURL","then","catch","success","handleDeleteImage","DeleteForever","internalCardContainer","padding","mainContainer","input","display","info","marginTop","button","paddingTop","icon","fontSize","xsAppBar","top","bottom","fabButton","position","zIndex","left","right","grow","flexGrow","toolbar","mixins","menuButton","marginRight","title","Dashboard","handleLogout","types","Hidden","xsDown","AppBar","Toolbar","edge","smUp","Fab","accept","onChange","selected","target","files","includes","htmlFor","PhotoCamera","Link","AccountBox","ExitToApp","Login","ForgotPassword","setMessage","UpdateProfile","dialog","setOpenDialog","closeDialog","promises","update","Promise","all","finally","defaultValue","placeholder","InputLabelProps","shrink","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","PrivateRoute","Component","rest","render","props","minHeight","App","basename","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","options","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","StrictMode","template","AlertTemplate","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.257208cb.chunk.js","sourcesContent":["//This file arranges the connection between the app and firebase\nimport firebase from \"firebase/app\"\nimport 'firebase/storage';\nimport 'firebase/firestore';\nimport \"firebase/auth\"\n\n//firebase authenticatie obtained from local env file\nconst app = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n})\n\n//storage\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n//authenticatie\nexport const auth = app.auth()\n//firebase exports to use in other components\nexport { app, projectFirestore, projectStorage, timestamp };","import React, { useContext, useState, useEffect } from 'react'\nimport { auth } from '../firebase'\nconst AuthContext = React.createContext()\n\n//useAuth hook\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({ children }) {\n    const [currentUser, setCurrentUser] = useState()\n    const [loading, setLoading] = useState(true)\n\n    //create user\n    function signup(email, password) {\n        return auth.createUserWithEmailAndPassword(email, password)\n    }\n    //login function\n    function login(email, password) {\n        return auth.signInWithEmailAndPassword(email, password)\n    }\n\n    //logout function\n    function logout() {\n        return auth.signOut()\n    }\n\n    //reset password\n    function resetPassword(email) {\n        return auth.sendPasswordResetEmail(email)\n    }\n    // Update email\n    function updateEmail(email) {\n        return auth.currentUser.updateEmail(email)\n    }\n    // Update password\n    function updatePassword(password) {\n        return auth.currentUser.updatePassword(password)\n    }\n    //delete account\n    function deleteAccount() {\n        return auth.currentUser.delete()\n    }\n    //update displayname\n    function updateDisplayName(userName) {\n        return auth.currentUser.updateProfile({\n            displayName: userName,\n        })\n    }\n\n    //useEffect so you only run it when mounting component\n    useEffect(() => {\n        //firebase method to set current user\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            setCurrentUser(user)\n            //no loading when there already is a user\n            setLoading(false)\n        })\n        return unsubscribe\n    }, [])\n\n    //Export\n    const value = {\n        currentUser,\n        signup,\n        login,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword,\n        deleteAccount,\n        updateDisplayName,\n    }\n    return (\n        //value contains all the information you want to provide at authentication\n        //See above\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}\n","import React, { useRef, useState } from 'react';\nimport { TextField, Card, Button, Grid, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuth } from '../contexts/AuthContext'\nimport { Link, useHistory } from \"react-router-dom\"\nimport { projectFirestore } from '../firebase'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        width: '80%',\n    },\n    container: {\n        height: '100vh',\n    },\n    card: {\n        width: '100%',\n        //Below the card itself\n        marginBottom: 10,\n        //Below the signup button\n        paddingBottom: 5,\n    },\n    inputField: {\n        width: '100%',\n        maxWidth: 350,\n    }\n}));\n\nexport default function Signup() {\n    const classes = useStyles()\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const displayNameRef = useRef();;\n    const { signup } = useAuth();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const accounts = projectFirestore.collection('accounts');\n\n\n    //handles the signup\n    //function that handles the submit info (email and password) and error handling (see useRef hooks)\n    async function handleSubmit(e) {\n        //preventDefault prevents refreshing\n        e.preventDefault()\n\n        //if both passwords are not the same\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n            return (\n                setError(\"Passwords do not match\")\n            )\n        }\n\n        try {\n            setError(\"\");\n            setLoading(true);\n            const result = await signup(\n                emailRef.current.value,\n                passwordRef.current.value\n            );\n            //Set displayname\n            //https://medium.com/@doyinolarewaju/firebase-adding-extra-information-to-user-on-sign-up-and-other-tips-4ebe215866e\n            await result.user.updateProfile({\n                displayName: displayNameRef.current.value\n            });\n\n            console.log(result);\n\n            //Set user id\n            await accounts.doc(result.user.uid).set({\n                userID: result.user.uid,\n                userName: result.user.displayName\n            });\n            history.push(\"/\");\n        }\n\n        // Firebase signup error\n        catch (error) {\n            setError(error.message);\n        }\n        setLoading(false)\n    }\n\n    return (\n        <Grid container className={classes.container} justify='center' alignItems='center'>\n            <Grid item xs={12} sm={6}>\n                <Card className={classes.card}>\n                    <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\" >\n                        <Typography align='center' variant=\"h3\" component=\"h2\">\n                            Sign up\n                        </Typography>\n                        {/* Errors */}\n                        {error && <Alert severity=\"error\">{error}</Alert>}\n                        <form onSubmit={handleSubmit} align='center' className={classes.root} >\n                            {/* Username + email */}\n                            <Grid item>\n                                {/* Username */}\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"display-name\"\n                                    label=\"Display Name\"\n                                    inputRef={displayNameRef}\n                                    textalign='center'\n                                />\n                                {/* Email */}\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"email-input\"\n                                    label=\"Email\"\n                                    inputRef={emailRef}\n                                    textalign='center'\n                                />\n                            </Grid>\n                            {/* Password */}\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"password-input\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    inputRef={passwordRef}\n                                />\n                            </Grid>\n                            {/* Password check */}\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"password-confirm\"\n                                    label=\"Password-confirm\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    inputRef={passwordConfirmRef}\n                                />\n                            </Grid>\n                            <Button disabled={loading} variant=\"contained\" color=\"primary\" type=\"submit\">\n                                Sign Up\n                            </Button>\n                        </form>\n                    </Grid>\n                </Card>\n                <Typography align='center' variant=\"subtitle1\" component=\"h2\">\n                    Already have an account? <Link to=\"/login\">Log in</Link>\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase'\nimport { useAuth } from '../contexts/AuthContext'\n\n//Upload file to firebase storage\nconst useStorage = (file) => {\n    //progress of load\n    const [progress, setProgress] = useState(0);\n    //any errors while uploading\n    const [error, setError] = useState(null);\n    //url after uploading\n    const [url, setUrl] = useState(null);\n    const { currentUser } = useAuth();\n    // const [user, setUser ]\n    //all the logic uploading the file\n    useEffect(() => {\n        //references\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n\n\n        //uploads the file with reference ^\n        //listener fires functions when state changes\n        //snapshot in time of the upload at that moment in time\n        storageRef.put(file).on('state_changed', (snap) => {\n            //percentage of the upload\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, (err) => {\n            setError(err);\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            const name = file.name;\n            collectionRef.add({ url, createdAt, userID: currentUser.uid, name })\n            setUrl(url);\n        })\n    }, [file, currentUser]) //everytime file changes this effect will fire\n    //these will be the the values you can access\n    return { progress, url, error }\n}\n\nexport default useStorage;\n","import React, { useEffect } from 'react'\nimport useStorage from '../hooks/useStorage'\n\nconst ProgressBar = ({ file, setFile }) => {\n    const { url, progress } = useStorage(file);\n    console.log(progress, url);\n\n    //if file is null there is no more progressbar\n    //so reset the file to null after obtaining a url, which means it has finished uploading\n    useEffect(() => {\n        if (url) {\n            setFile(null);\n        }\n    }, [url, setFile])\n\n    return (\n        <div className=\"progress-bar\" style={{ width: progress + '%' }}></div>\n    )\n}\nexport default ProgressBar;","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase';\n\n//This hook gets all documents saved in firestore collection\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let documents = [];\n                snap.forEach(doc => {\n                    // For each document push these data into documents\n                    documents.push({ ...doc.data(), id: doc.id })\n                });\n                setDocs(documents)\n            })\n        //unsub when no longer using collection\n        return () => unsub();\n    }, [collection])\n\n    return { docs };\n}\n\nexport default useFirestore;","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase';\n\n//This hook gets all documents saved in firestore collection\nconst useFirestore2 = (collection) => {\n    const [docs2, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n\n            .onSnapshot((snap) => {\n                let documents = [];\n                snap.forEach(doc => {\n                    // For each document push these data into documents\n                    documents.push({ ...doc.data(), id: doc.id })\n                });\n                setDocs(documents)\n            })\n        //unsub when no longer using collection\n        return () => unsub();\n    }, [collection])\n\n    return { docs2 };\n}\n\nexport default useFirestore2;","import React, { useState } from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport useFirestore2 from '../hooks/useFirestore2'\nimport { Typography, IconButton, Card } from '@material-ui/core'\nimport { DeleteForever } from '@material-ui/icons'\nimport { projectFirestore } from '../firebase';\nimport { useAuth } from '../contexts/AuthContext'\nimport { useAlert } from \"react-alert\";\nimport { projectStorage } from '../firebase'\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\nimport ModalImage from \"react-modal-image\";\n\n\nconst ImageGrid = () => {\n    const { docs } = useFirestore('images');\n    const { docs2 } = useFirestore2('accounts');\n    const { currentUser } = useAuth();\n    const [error, setError] = useState(\"\");\n    const alert = useAlert();\n    const [mouse, setMouse] = useState(false);\n\n    const onMouseEnter = () => {\n        return setMouse(true);\n    }\n\n    const onMouseLeave = () => {\n        return setMouse(false);\n    }\n    // Disable value in button\n    // Returns false for the disable button if the current user wants to delete own pic\n    const handleButton = (imageId) => {\n        if (imageId !== currentUser.uid) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    //Delete an image. Current user can only delete own images\n    const handleDeleteImage = (value, id, url) => {\n        const imgRef = projectStorage.refFromURL(url);\n        if (id === currentUser.uid) {\n            setError('');\n\n            // Delete image from storage\n            imgRef.delete()\n                .then(function () {\n                    console.log('storage delete successfull!')\n                })\n                .catch(function (error) {\n                    console.error(\"Error removing document: \", error);\n                })\n\n            // Delete image from images collection\n            projectFirestore.collection('images').doc(value).delete()\n                .then(function () {\n                    console.log(\"Document successfully deleted!\");\n                    alert.success(\"Image deleted succesfully\");\n                })\n                .catch(function (error) {\n                    console.error(\"Error removing document: \", error);\n                });\n        }\n        else {\n            setError('That is not your picture!')\n            console.log(error)\n            alert.error(\"You can't delete other user's photos\");\n        }\n    };\n\n    console.log(docs);\n\n    return <ResponsiveMasonry\n        //Breakpoints for pixels per column \n        //pixels : column\n        columnsCountBreakPoints={{ 350: 1, 750: 2, 900: 3 }}\n    >\n        <Masonry gutter=\"10px\">\n            {docs && docs\n                // For every image\n                .map(image => (\n                    <div>\n                        {docs2 && docs2\n                            // For every single image:\n                            // Filter statament only contains the user of specific image\n                            // https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d\n                            .filter((user) => image.userID === user.userID)\n                            //Now you have the user that belongs to the image.ID\n                            .map(user => (\n                                <div>\n                                    <div\n                                        onMouseEnter={() => onMouseEnter()}\n                                        onMouseLeave={() => onMouseLeave()}\n                                    >\n                                        <ModalImage\n                                            small={image.url}\n                                            medium={image.url}\n                                            alt={image.name}\n                                            hideDownload\n                                            hideZoom\n                                        />\n                                    </div>\n                                    <Card\n                                        key={image.id}\n                                        className=\"Card\"\n                                    >\n                                        {/* <img src={image.url} alt={image.name} key={image.id} style={{ width: \"100%\", display: \"block\" }} /> */}\n                                        <Typography gutterBottom variant=\"subtitle1\"> 'Title' by {user.userName}\n\n                                            {/* If the image is of the user then a delete button will render */}\n                                            {/* Delete button */}\n                                            {handleButton(image.userID) &&\n                                                <IconButton\n                                                    color=\"secondary\" aria-label=\"delete image\"\n                                                    onClick={() => handleDeleteImage(image.id, image.userID, image.url)}\n                                                    component=\"span\" >\n                                                    <DeleteForever />\n                                                </IconButton>}\n                                        </Typography>\n                                    </Card>\n                                </div>\n                            ))}\n                    </div>\n                ))\n            }\n        </Masonry>\n    </ResponsiveMasonry>\n}\nexport default ImageGrid;\n\n","import React, { useState } from 'react'\nimport { Grid, Typography, Card, Button, makeStyles, IconButton, Hidden, AppBar, Toolbar, Fab } from \"@material-ui/core\"\nimport { PhotoCamera, AccountBox, ExitToApp } from '@material-ui/icons'\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Alert } from \"@material-ui/lab\"\nimport { useAuth } from '../contexts/AuthContext'\nimport ProgressBar from './ProgressBar'\nimport ImageGrid from './ImageGrid'\nimport { useAlert } from \"react-alert\";\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\n\nconst useStyles = makeStyles((theme) => ({\n    internalCardContainer: {\n        '& > *': {\n            margin: theme.spacing(0),\n        },\n        padding: 5,\n    },\n    mainContainer: {\n        width: '100%',\n    },\n    input: {\n        display: 'none',\n    },\n    info: {\n        width: \"100%\",\n    },\n    card: {\n        width: '100%',\n        maxWidth: 600,\n        marginTop: 5,\n        marginBottom: 10\n    },\n    button: {\n        paddingTop: 5,\n        paddingBottom: 10,\n    },\n    icon: {\n        fontSize: '2em',\n    },\n    xsAppBar: {\n        top: 'auto',\n        bottom: 0,\n    },\n    fabButton: {\n        position: 'absolute',\n        zIndex: 1,\n        top: -30,\n        left: 0,\n        right: 0,\n        margin: '0 auto',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    toolbar: {\n        toolbar: theme.mixins,\n        margin: 0,\n    },\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Dashboard() {\n    const classes = useStyles();\n\n    const [error, setError] = useState(\"\")\n    const history = useHistory()\n    const { currentUser, logout } = useAuth()\n    const alert = useAlert();\n\n\n    //Log out handler\n    async function handleLogout() {\n        setError('')\n        try {\n            await logout()\n            history.push('/login')\n        }\n        catch {\n            setError('Failed to logout')\n        }\n    }\n\n\n    //Store image hook\n    const [file, setFile] = useState(null);\n\n    //Allowed filetypes\n    const types = ['image/png', 'image/jpeg'];\n\n    //Image handler\n    //selected image\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n        console.log(selected)\n        //Check if a file is selected\n        if (selected && types.includes(selected.type)) {\n            //store the file\n            setFile(selected);\n            setError('');\n            alert.success(\"Image succesfully uploaded\");\n        }\n        else {\n            setFile(null);\n            setError('Please select an image file (png or jpeg)')\n        }\n    }\n\n    // Menu items\n\n    return (\n        // Main container with (Profile info and upload card) and (Image grid)\n        <Grid container justify=\"center\">\n\n            {/* Desktop appbar */}\n            <Hidden xsDown>\n                <AppBar position=\"static\">\n                    <Toolbar>\n\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n\n                        <Typography variant=\"h6\" className={classes.title}>{currentUser.displayName}</Typography>\n                        <Button color=\"inherit\" onClick={handleLogout}>Logout</Button>\n                    </Toolbar>\n                </AppBar>\n            </Hidden>\n\n            {/* Mobile app bar */}\n            <Hidden smUp>\n                <AppBar position=\"fixed\" color=\"primary\" className={classes.xsAppBar}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton}>\n                            <AddIcon />\n                        </Fab>\n                        <div className={classes.grow} />\n                        <IconButton color=\"inherit\">\n                            <SearchIcon />\n                        </IconButton>\n                        <IconButton edge=\"end\" color=\"inherit\">\n                            <MoreIcon />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n            </Hidden>\n\n            {/* Profile + upload card container */}\n            <Grid item xs={12} sm={8} align=\"center\">\n                <Card className={classes.card} align=\"center\">\n                    <Grid container direction=\"column\" className={classes.internalCardContainer}>\n                        {/* User info */}\n                        <Grid item align=\"center\">\n                            <Typography align=\"center\" variant=\"h2\">Storygram</Typography>\n                            <Typography variant=\"h5\">{currentUser.displayName} </Typography>\n                        </Grid>\n\n                        {/* Information message output */}\n                        <Grid item className={classes.info}>\n                            {/* If left statement then right statement.. */}\n                            {error && <Alert severity=\"error\">{error}</Alert>}\n                            {file && <Alert severity=\"info\">Selected image: {file.name}</Alert>}\n                        </Grid>\n                        {file && <ProgressBar align=\"left\" file={file} setFile={setFile} />}\n\n                        {/* Action buttons container */}\n                        <Grid container direction=\"row\">\n                            {/* Upload image */}\n                            <Grid item align='center' className={classes.button} xs={4}>\n                                <input\n                                    accept=\"image/*\"\n                                    className={classes.input}\n                                    id=\"icon-button-file\"\n                                    type=\"file\"\n                                    onChange={changeHandler}\n                                />\n                                <label htmlFor=\"icon-button-file\">\n                                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" >\n                                        <PhotoCamera className={classes.icon} />\n                                    </IconButton>\n                                </label>\n                                <Typography>Upload an image</Typography>\n                            </Grid>\n\n                            {/* Update profile info */}\n                            <Grid item align='center' className={classes.button} xs={4}>\n                                <IconButton color=\"primary\" aria-label=\"account\" component={Link} to={\"./UpdateProfile\"} >\n                                    <AccountBox className={classes.icon} />\n                                </IconButton>\n                                <Typography>Update account</Typography>\n                            </Grid>\n\n                            {/* Logout button */}\n                            <Grid item align='center' className={classes.button} xs={4}>\n                                <IconButton color=\"primary\" aria-label=\"log out\" onClick={handleLogout} component=\"span\" >\n                                    <ExitToApp className={classes.icon} />\n                                </IconButton>\n                                <Typography>Log out</Typography>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n            {/* </Grid> */}\n\n            {/* Image grid imported from ImageGrid.js*/}\n            <Grid item xs={12} align=\"center\">\n                <ImageGrid />\n            </Grid>\n        </Grid >\n    )\n}\n","import React, { useRef, useState } from 'react';\nimport { TextField, Card, Button, Grid, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuth } from '../contexts/AuthContext';\n//useHistory hook for rerouting to dashboard after login\nimport { Link, useHistory } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        width: '80%',\n    },\n    container: {\n        height: '100vh',\n    },\n    card: {\n        width: '100%',\n        //Below the card itself\n        marginBottom: 10,\n        //Below the signup button\n        paddingBottom: 5,\n    },\n    inputField: {\n        width: '100%',\n        maxWidth: 350,\n    }\n}));\n\nexport default function Login() {\n    const classes = useStyles()\n\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const { login } = useAuth()\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const history = useHistory()\n\n    //handles the signup\n    //function that handles the submit info (email and password) and error handling (see useRef hooks)\n    async function handleSubmit(e) {\n        //preventDefault prevents refreshing\n        e.preventDefault();\n        try {\n            setError(\"\");\n            setLoading(true);\n            //login logic\n            await login(emailRef.current.value, passwordRef.current.value);\n            history.push(\"/\");\n        } catch {\n            setError(\"Failed to log in\");\n        }\n        setLoading(false);\n    }\n\n    return (\n        <Grid container className={classes.container} justify='center' alignItems='center'>\n            <Grid item xs={12} sm={6}>\n                <Card className={classes.card}>\n                    <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\" >\n                        <Typography align='center' variant=\"h3\" component=\"h2\">\n                            Login\n                        </Typography>\n                        {error && <Alert severity=\"error\">{error}</Alert>}\n                        <form onSubmit={handleSubmit} align='center' className={classes.root} >\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"email-input\"\n                                    label=\"Email\"\n                                    inputRef={emailRef}\n                                    textalign='center'\n                                />\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"password-input\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    inputRef={passwordRef}\n                                />\n                            </Grid>\n                            <Button disabled={loading} variant=\"contained\" color=\"primary\" type=\"submit\">\n                                Login\n                            </Button>\n                            <Typography><Link to='/forgot-password'>Forgot password?</Link></Typography>\n                        </form>\n                    </Grid>\n                </Card>\n                <Typography align='center' variant=\"subtitle1\" component=\"h2\">\n                    Need an account? <Link to=\"/signup\">Sign up</Link>\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useRef, useState } from 'react';\nimport { TextField, Card, Button, Grid, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuth } from '../contexts/AuthContext';\n//useHistory hook for rerouting to dashboard after login\nimport { Link } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        width: '80%',\n    },\n    container: {\n        height: '100vh',\n    },\n    card: {\n        width: '100%',\n        //Below the card itself\n        marginBottom: 10,\n        //Below the signup button\n        paddingBottom: 5,\n    },\n    inputField: {\n        width: '100%',\n        maxWidth: 350,\n    }\n}));\n\nexport default function ForgotPassword() {\n    const classes = useStyles()\n\n    const emailRef = useRef()\n    const { resetPassword } = useAuth()\n    const [error, setError] = useState('')\n    const [message, setMessage] = useState('')\n    const [loading, setLoading] = useState(false)\n\n\n    //handles the signup\n    //function that handles the submit info (email and password) and error handling (see useRef hooks)\n    async function handleSubmit(e) {\n        //preventDefault prevents refreshing\n        e.preventDefault()\n        try {\n            setMessage('')\n            setError(\"\")\n            setLoading(true)\n            //reset \n            await resetPassword(emailRef.current.value)\n            setMessage('Check your email')\n        } catch {\n            setError(\"Failed to reset password\")\n        }\n        setLoading(false)\n    }\n\n    return (\n        <Grid container className={classes.container} justify='center' alignItems='center'>\n            <Grid item xs={12} sm={6}>\n                <Card className={classes.card}>\n                    <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\" >\n                        <Typography align='center' variant=\"h3\" component=\"h2\">\n                            Reset Password\n                        </Typography>\n                        {error && <Alert severity=\"error\">{error}</Alert>}\n                        {message && <Alert severity=\"success\">{message}</Alert>}\n                        <form onSubmit={handleSubmit} align='center' className={classes.root} >\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"email-input\"\n                                    label=\"Email\"\n                                    inputRef={emailRef}\n                                    textalign='center'\n                                />\n                            </Grid>\n                            <Button disabled={loading} variant=\"contained\" color=\"primary\" type=\"submit\">\n                                Reset Password\n                            </Button>\n                            <Typography><Link to='/login'>Login</Link></Typography>\n                        </form>\n                    </Grid>\n                </Card>\n                <Typography align='center' variant=\"subtitle1\" component=\"h2\">\n                    Need an account? <Link to=\"/signup\">Sign up</Link>\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useRef, useState } from 'react';\nimport { TextField, Card, Button, Grid, Typography, DialogActions, Dialog, DialogTitle, DialogContentText, DialogContent } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useAuth } from '../contexts/AuthContext'\nimport { Link, useHistory } from \"react-router-dom\"\nimport { projectFirestore } from '../firebase'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        width: '80%',\n    },\n    container: {\n        height: '100vh',\n    },\n    card: {\n        width: '100%',\n        //Below the card itself\n        marginBottom: 10,\n        //Below the signup button\n        paddingBottom: 5,\n    },\n    inputField: {\n        width: '100%',\n        maxWidth: 350,\n    }\n}));\n\nexport default function UpdateProfile() {\n    const classes = useStyles()\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const displayNameRef = useRef();\n    const { currentUser, updatePassword, updateEmail, updateDisplayName, deleteAccount } = useAuth();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const accounts = projectFirestore.collection('accounts');\n\n    //Delete account handler (todo: need to delete all images still)\n    async function handleDelete() {\n        setError('')\n        try {\n            await deleteAccount()\n            history.push('/login')\n\n        }\n        catch (error) {\n            setError(error.message)\n        }\n\n    }\n    // Dialog box \n    const [dialog, setOpenDialog] = React.useState(false);\n\n    const openDialog = () => {\n        setOpenDialog(true);\n    };\n\n    const closeDialog = () => {\n        setOpenDialog(false);\n    };\n\n    //handles the signup\n    //function that handles the submit info (email and password) and error handling (see useRef hooks)\n    function handleSubmit(e) {\n        //preventDefault prevents refreshing\n        e.preventDefault()\n        //if both passwords are not the same\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n            return setError(\"Passwords do not match\")\n        }\n        //wait untill all promises finish before throwing errors\n        const promises = []\n        setLoading(true)\n        setError(\"\")\n\n        //Update email\n        //if  email is not equal to current email\n        if (emailRef.current.value !== currentUser.email) {\n            //update email with current value\n            promises.push(updateEmail(emailRef.current.value))\n        }\n\n        //Update Username\n        //if  username is not equal to current username\n        if (displayNameRef.current.value !== currentUser.displayName) {\n            //update username with current value\n            promises.push(updateDisplayName(displayNameRef.current.value))\n            //update data in account collection\n            promises.push(accounts.doc(currentUser.uid).update({\n                userName: displayNameRef.current.value\n            }));\n        }\n\n        //Update password\n        //update password with current value (if there is a value ofcourse)\n        if (passwordRef.current.value) {\n            promises.push(updatePassword(passwordRef.current.value))\n        }\n\n        //if all promises are succsful redirect to homepage\n        Promise.all(promises).then(() => {\n            history.push('/')\n            //catch the error\n        }).catch((error) => {\n            setError(error.message)\n            //setLoading state to false again\n        }).finally(() => {\n            setLoading(false)\n        })\n    }\n\n    return (\n        <Grid container className={classes.container} justify='center' alignItems='center'>\n            <Grid item xs={12} sm={6}>\n                <Card className={classes.card}>\n                    <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\" >\n                        <Typography align='center' variant=\"h3\" component=\"h2\">\n                            Update Profile\n                        </Typography>\n                        {error && <Alert severity=\"error\">{error}</Alert>}\n                        <form onSubmit={handleSubmit} align='center' className={classes.root} >\n                            {/* Grid item for username and email */}\n                            <Grid item>\n                                {/* Username */}\n                                <TextField\n                                    className={classes.inputField}\n                                    id=\"display-name\"\n                                    label=\"Display Name\"\n                                    inputRef={displayNameRef}\n                                    textalign='center'\n                                    defaultValue={currentUser.displayName}\n                                    placeholder=\"Leave empty to keep the same\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                                {/* Email */}\n                                <TextField\n                                    className={classes.inputField}\n                                    required\n                                    id=\"email-input\"\n                                    label=\"Email\"\n                                    inputRef={emailRef}\n                                    textalign='center'\n                                    defaultValue={currentUser.email}\n                                />\n                            </Grid>\n                            {/* Password */}\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    id=\"password-input\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    inputRef={passwordRef}\n                                    placeholder=\"Leave empty to keep the same\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            {/* Password check */}\n                            <Grid item>\n                                <TextField\n                                    className={classes.inputField}\n                                    id=\"password-confirm\"\n                                    label=\"Password-confirm\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    inputRef={passwordConfirmRef}\n                                    placeholder=\"Leave empty to keep the same\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            {/* Update button */}\n                            <Button disabled={loading} variant=\"contained\" color=\"primary\" type=\"submit\">\n                                Update\n                            </Button>\n                        </form>\n\n                        {/* Delete account button */}\n                        <Grid item align='center' className={classes.button} xs={6} sm={3}>\n                            <Button onClick={openDialog} align='center' variant=\"contained\" color=\"secondary\" component=\"h2\">Delete Account</Button>\n                            <Dialog\n                                open={dialog}\n                                onClose={closeDialog}\n                                aria-labelledby=\"alert-dialog-title\"\n                                aria-describedby=\"alert-dialog-description\"\n                            >\n                                <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete your account?\"}</DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText id=\"alert-dialog-description\">\n                                        Deleting your account can not be undone.\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={closeDialog} color=\"primary\">\n                                        Cancel\n                                    </Button>\n                                    <Button onClick={handleDelete} color=\"primary\" autoFocus>\n                                        Delete\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n                        </Grid>\n\n                    </Grid>\n                </Card>\n                <Typography align='center' variant=\"subtitle1\" component=\"h2\">\n                    <Link to=\"/\">Cancel</Link>\n                </Typography>\n\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { useAuth } from \"../contexts/AuthContext\"\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n    const { currentUser } = useAuth()\n\n    return (\n        //This is important as to not render the dashboard component when no user is logged in or after logging out\n        <Route\n            {...rest}\n            //If there is a current user then render out the component\n            //If there is no user, redirect to login page \n            render={props => {\n                return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\n            }}\n        ></Route>\n    )\n}","import { AuthProvider } from \"../contexts/AuthContext\";\nimport Signup from \"./Signup\";\nimport Dashboard from \"./Dashboard\";\nimport Login from \"./Login\";\nimport ForgotPassword from \"./ForgotPassword\"\nimport UpdateProfile from \"./UpdateProfile\"\n//https://create-react-app.dev/docs/deployment/\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Grid, makeStyles } from '@material-ui/core'\nimport PrivateRoute from './privateRoute'\n\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    minHeight: '100vh',\n    width: '100%',\n    maxWidth: 1920,\n  },\n  mainContainer: {\n    width: '100%',\n  }\n}));\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <Grid container className={classes.mainContainer} justify=\"center\">\n      <Grid container item justify=\"center\" className={classes.container} align='center'>\n        <Router basename=\"/storygram\">\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/\" component={Dashboard} />\n              <PrivateRoute exact path=\"/UpdateProfile\" component={UpdateProfile} />\n              <Route path=\"/signup\" component={Signup} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\n// optional configuration\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register();"],"sourceRoot":""}